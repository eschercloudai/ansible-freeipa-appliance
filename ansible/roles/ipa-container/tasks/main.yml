---
- name: make sure that no hosts in the ipaprimary group are in the ipareplica group too
  ansible.builtin.assert:
    that:
      - not(inventory_hostname in groups['ipaprimary'] and inventory_hostname  in groups['ipareplicas'])

- name: check if we have previous restore state
  ansible.builtin.stat:
    path: "{{ ipa_container_state_path }}/var/lib/ipa/sysrestore/sysrestore.state"
  register: existing_ipa_data

- name: copy ipa_install monitor script
  ansible.builtin.copy:
    src: monitor_ipa_install.sh
    dest: /root/monitor_ipa_install.sh
    owner: root
    group: root
    mode: '0755'
  become: true

- name: bootstrap primary
  ansible.builtin.include_tasks: bootstrap_initial_container.yml
  tags:
    - ipa-primary-bootstrap
  when:
    - not existing_ipa_data.stat.exists | bool
    - inventory_hostname in groups['ipaprimary']

- name: bootstrap replica(s)
  ansible.builtin.include_tasks: bootstrap_initial_container.yml
  when:
    - not existing_ipa_data.stat.exists | bool
    - inventory_hostname in groups['ipareplicas']
  tags:
    - ipa-replica-bootstrap

- name: remove freeipa {{ipa_container_type}} bootstrap container
  containers.podman.podman_container:
    name: "freeipa-{{ipa_container_type}}-bootstrap"
    state: absent
  become: true

# the following will create but not start the containers
# this  MUST but started from systemd or you run the risk of a synchronised restart which is what we are trying to avoid at all costs
- name: ensure freeipa containers are present
  containers.podman.podman_container:
    name: "freeipa-{{ipa_container_type}}"
    detach: true
    recreate: false
    image: "{{ ipa_container_remote }}"
    restart_policy: "no"
    rm: false
    user: root
    network: host
    state: present
    volume: "{{ ipa_container_volume_list }}"
    command: "{{ ipa_container_create_commands[ipa_container_type] }}"
  become: true
  register: ipa_container

- name: Create systemd unit file
  ansible.builtin.template:
    dest: /usr/lib/systemd/system/ipa-podman.service
    src: ipa-podman.service.j2
  become: true
  notify:
    - reload systemd units
    - enable ipa-podman container

- debug:
    var: ipa_container['container']['State']

- name: ensure ipa-podman service is in desired state
  ansible.builtin.systemd:
    name: ipa-podman
    state: "{{ ipa_container_service_state }}"
  become: true
